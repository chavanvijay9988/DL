#include <stdio.h>
#include <omp.h>

void merge(int array[], int low, int mid, int high) {
    int *temp = new int[high - low + 1];
    int i = low, j = mid + 1, k = 0;

    while (i <= mid && j <= high) {
        if (array[i] <= array[j]) {
            temp[k++] = array[i++];
        } else {
            temp[k++] = array[j++];
        }
    }

    while (i <= mid) {
        temp[k++] = array[i++];
    }

    while (j <= high) {
        temp[k++] = array[j++];
    }

    for (i = low, k = 0; i <= high; ++i, ++k) {
        array[i] = temp[k];
    }

    delete[] temp;
}

void mergesort(int array[], int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
        #pragma omp parallel sections num_threads(2)
        {
            #pragma omp section
            {
                mergesort(array, low, mid);
            }
            #pragma omp section
            {
                mergesort(array, mid + 1, high);
            }
        }
        #pragma omp barrier
        merge(array, low, mid, high);
    }
}

int main() {
    int array[50];
    int size;

    printf("Enter total no. of elements: ");
    scanf("%d", &size);

    if (size > 50) {
        printf("Number of elements exceeds the limit.\n");
        return 1;
    }

    printf("Enter %d elements:\n", size);
    for (int i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }

    mergesort(array, 0, size - 1);

    printf("Sorted Elements:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");

    return 0;
}
